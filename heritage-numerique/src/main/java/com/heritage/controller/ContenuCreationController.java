package com.heritage.controller;

import com.heritage.dto.*;
import com.heritage.entite.Contenu;
import com.heritage.service.ContenuCreationService;
import com.heritage.service.MembreFamilleService;
import com.heritage.util.AuthenticationHelper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

/**
 * Contr√¥leur pour la cr√©ation de contenu avec types sp√©cifiques.
 * Supporte les types : CONTE, DEVINETTE, ARTISANAT, PROVERBE
 */
@RestController
@RequestMapping("/api/contenus")
@CrossOrigin(origins = "*")
@Tag(name = "üìù Cr√©ation de Contenu", description = "Endpoints pour cr√©er diff√©rents types de contenu culturel")
public class ContenuCreationController {

    private final ContenuCreationService contenuCreationService;
    private final MembreFamilleService membreFamilleService;

    public ContenuCreationController(ContenuCreationService contenuCreationService, MembreFamilleService membreFamilleService) {
        this.contenuCreationService = contenuCreationService;
        this.membreFamilleService = membreFamilleService;
    }

    /**
     * V√©rifie si l'utilisateur a le droit de cr√©er du contenu dans la famille.
     * Seuls les membres avec le r√¥le ADMIN ou EDITEUR peuvent cr√©er du contenu.
     */
    private void verifierPermissionCreation(Long idFamille) {
        Long userId = AuthenticationHelper.getCurrentUserId();
        String roleMembre = membreFamilleService.getRoleMembre(userId, idFamille);
        
        if (roleMembre == null) {
            throw new RuntimeException("Vous n'√™tes pas membre de cette famille");
        }
        
        if (!"ADMIN".equals(roleMembre) && !"EDITEUR".equals(roleMembre)) {
            throw new RuntimeException("Seuls les administrateurs et √©diteurs peuvent cr√©er du contenu");
        }
    }

    /**
     * Cr√©e un nouveau contenu selon son type.
     * 
     * Endpoint : POST /api/contenus/creer
     * 
     * Types support√©s :
     * - CONTE : titre, photo, fichier (PDF/TXT) ou texte
     * - ARTISANAT : titre, description, photos, vid√©o (optionnelle)
     * - PROVERBE : titre, origine, signification, proverbe, photo
     * - DEVINETTE : titre, devinette, r√©ponse, photo
     * 
     * @param request Requ√™te de cr√©ation de contenu
     * @param authentication Authentification de l'utilisateur
     * @return Contenu cr√©√©
     */
    @PostMapping("/creer")
    @Operation(summary = "Cr√©er un contenu g√©n√©rique", description = "Cr√©er un contenu avec tous les champs possibles")
    public ResponseEntity<Contenu> creerContenu(
            @Valid @ModelAttribute CreationContenuRequest request,
            Authentication authentication) {

        verifierPermissionCreation(request.getIdFamille());
        Long auteurId = AuthenticationHelper.getCurrentUserId();
        Contenu contenu = contenuCreationService.creerContenu(request, auteurId);
        return ResponseEntity.ok(contenu);
    }

    /**
     * Cr√©e un conte.
     * 
     * Endpoint : POST /api/contenus/conte
     * 
     * @param request Requ√™te de cr√©ation de conte
     * @param authentication Authentification de l'utilisateur
     * @return Conte cr√©√©
     */
    @PostMapping(value = "/conte", consumes = "multipart/form-data")
    @Operation(summary = "Cr√©er un conte", description = "Cr√©er un conte avec titre, photo, fichier (PDF/TXT) ou texte")
    public ResponseEntity<Contenu> creerConte(
            @Valid @ModelAttribute ConteRequest request,
            Authentication authentication) {

        verifierPermissionCreation(request.getIdFamille());
        Long auteurId = AuthenticationHelper.getCurrentUserId();
        Contenu contenu = contenuCreationService.creerConte(request, auteurId);
        return ResponseEntity.ok(contenu);
    }

    /**
     * Cr√©e un artisanat.
     * 
     * Endpoint : POST /api/contenus/artisanat
     * 
     * @param request Requ√™te de cr√©ation d'artisanat
     * @param authentication Authentification de l'utilisateur
     * @return Artisanat cr√©√©
     */
    @PostMapping(value = "/artisanat", consumes = "multipart/form-data")
    @Operation(summary = "Cr√©er un artisanat", description = "Cr√©er un artisanat avec titre, description, photos et vid√©o optionnelle")
    public ResponseEntity<Contenu> creerArtisanat(
            @Valid @ModelAttribute ArtisanatRequest request,
            Authentication authentication) {
        
        verifierPermissionCreation(request.getIdFamille());
        Long auteurId = AuthenticationHelper.getCurrentUserId();
        Contenu contenu = contenuCreationService.creerArtisanat(request, auteurId);
        return ResponseEntity.ok(contenu);
    }

    /**
     * Cr√©e un proverbe.
     * 
     * Endpoint : POST /api/contenus/proverbe
     * 
     * @param request Requ√™te de cr√©ation de proverbe
     * @param authentication Authentification de l'utilisateur
     * @return Proverbe cr√©√©
     */
    @PostMapping(value = "/proverbe", consumes = "multipart/form-data")
    @Operation(summary = "Cr√©er un proverbe", description = "Cr√©er un proverbe avec origine, signification, texte et photo")
    public ResponseEntity<Contenu> creerProverbe(
            @Valid @ModelAttribute ProverbeRequest request,
            Authentication authentication) {
        
        verifierPermissionCreation(request.getIdFamille());
        Long auteurId = AuthenticationHelper.getCurrentUserId();
        Contenu contenu = contenuCreationService.creerProverbe(request, auteurId);
        return ResponseEntity.ok(contenu);
    }

    /**
     * Cr√©e une devinette.
     * 
     * Endpoint : POST /api/contenus/devinette
     * 
     * @param request Requ√™te de cr√©ation de devinette
     * @param authentication Authentification de l'utilisateur
     * @return Devinette cr√©√©e
     */
    @PostMapping(value = "/devinette", consumes = "multipart/form-data")
    @Operation(summary = "Cr√©er une devinette", description = "Cr√©er une devinette avec question, r√©ponse et photo")
    public ResponseEntity<Contenu> creerDevinette(
            @Valid @ModelAttribute DevinetteRequest request,
            Authentication authentication) {
        
        verifierPermissionCreation(request.getIdFamille());
        Long auteurId = AuthenticationHelper.getCurrentUserId();
        Contenu contenu = contenuCreationService.creerDevinette(request, auteurId);
        return ResponseEntity.ok(contenu);
    }
}
